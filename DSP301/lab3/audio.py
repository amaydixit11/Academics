# -*- coding: utf-8 -*-
"""12340220_AmayDixit_Lab3_DSP301_AudioProcessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rojT6elYFXVAWKrFduYIh6TGpt0ivCCz
"""

# Install Whisper + dependencies
!pip install git+https://github.com/openai/whisper.git
!sudo apt update && sudo apt install ffmpeg -y

# Import libraries
import whisper

# Load pre-trained Whisper model
# Options: tiny, base, small, medium, large
model = whisper.load_model("small")

# # Upload an audio file (wav, mp3, m4a etc.)
# from google.colab import files
# uploaded = files.upload()

# # Take first uploaded file
# audio_file = list(uploaded.keys())[0]

audio_file = "/content/my_noisyy_audio.wav"
# Transcribe the audio
result = model.transcribe(audio_file)

# Print the transcription
print("Transcription:\n", result["text"])

!pip install noisereduce librosa soundfile speechrecognition jiwer

import whisper
from jiwer import wer
import os
import scipy.io.wavfile as wav
import numpy as np

REFERENCE_SENTENCE = "The quick brown fox jumps over the lazy dog"

def simple_noise_reduction():
    print("=== SIMPLE NOISE REDUCTION ===")

    try:
        rate, data = wav.read("my_noisyy_audio.wav")
        print(f"Loaded audio: {rate} Hz, {len(data)} samples")
        if data.dtype == np.int16:
            data = data.astype(np.float32) / 32768.0
        threshold = 0.01
        mask = np.abs(data) > threshold
        cleaned_data = data * mask

        cleaned_data = cleaned_data / np.max(np.abs(cleaned_data)) * 0.8
        cleaned_data = (cleaned_data * 32767).astype(np.int16)
        wav.write("my_cleaned_audio.wav", rate, cleaned_data)

        print("✓ Simple noise reduction complete!")

    except Exception as e:
        print(f"❌ Error: {e}")

def transcribe_audio(filename, label):
    try:
        if not os.path.exists(filename):
            return f"FILE NOT FOUND: {filename}"
        model = whisper.load_model("small")

        result = model.transcribe(filename)
        transcription = result["text"].strip()

        return transcription

    except Exception as e:
        return f"ERROR: {str(e)}"

def task2_transcription():
    print("\n=== TRANSCRIPTION ===")

    files_to_transcribe = [
        ("Clean Audio", "clean.wav"),
        ("Noisy Audio", "my_noisyy_audio.wav"),
        ("Cleaned Audio", "my_cleaned_audio.wav")
    ]

    results = {}

    for label, filename in files_to_transcribe:
        print(f"Transcribing {label}...")
        transcription = transcribe_audio(filename, label)
        results[label] = transcription
        print(f"  Result: '{transcription}'")

    return results

def task3_calculate_wer(transcriptions):
    print(f"\n=== WER CALCULATION ===")
    print(f"Reference: '{REFERENCE_SENTENCE}'")


    test_cases = [
        ("Noisy Audio", transcriptions.get("Noisy Audio", "")),
        ("Cleaned Audio", transcriptions.get("Cleaned Audio", ""))
    ]

    for label, transcription in test_cases:
        print(f"\n{label}:")
        print(f"  Transcription: '{transcription}'")
        if transcription.startswith(("FILE NOT FOUND", "COULD NOT", "API ERROR", "ERROR")):
            print(f"  WER: Cannot calculate (transcription failed)")
            continue
        try:
            error_rate = wer(REFERENCE_SENTENCE.lower(), transcription.lower())
            percentage = error_rate * 100
            print(f"  WER: {percentage:.1f}%")
            ref_words = REFERENCE_SENTENCE.lower().split()
            hyp_words = transcription.lower().split()
            print(f"  Reference words: {len(ref_words)}, Transcribed words: {len(hyp_words)}")

        except Exception as e:
            print(f"  WER: Error calculating - {e}")

def main():
    print("ASR Assignment Part 2 - Lightweight Version")

    if not os.path.exists("clean.wav"):
        print("❌ Missing: clean.wav")
        return
    if not os.path.exists("my_noisyy_audio.wav"):
        print("❌ Missing: my_noisyy_audio.wav")
        return


    simple_noise_reduction()
    transcriptions = task2_transcription()
    task3_calculate_wer(transcriptions)

if __name__ == "__main__":
    main()

